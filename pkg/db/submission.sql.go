// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: submission.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSubmission = `-- name: CreateSubmission :exec
INSERT INTO submissions (
    id,
    question_id,
    language_id,
    source_code,
    testcases_passed,
    testcases_failed,
    runtime,
    memory,
    status,
    submission_time,
    description,
    user_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
`

type CreateSubmissionParams struct {
	ID              uuid.UUID
	QuestionID      uuid.UUID
	LanguageID      int32
	SourceCode      string
	TestcasesPassed pgtype.Int4
	TestcasesFailed pgtype.Int4
	Runtime         pgtype.Numeric
	Memory          pgtype.Numeric
	Status          *string
	SubmissionTime  pgtype.Timestamp
	Description     *string
	UserID          uuid.UUID
}

func (q *Queries) CreateSubmission(ctx context.Context, arg CreateSubmissionParams) error {
	_, err := q.db.Exec(ctx, createSubmission,
		arg.ID,
		arg.QuestionID,
		arg.LanguageID,
		arg.SourceCode,
		arg.TestcasesPassed,
		arg.TestcasesFailed,
		arg.Runtime,
		arg.Memory,
		arg.Status,
		arg.SubmissionTime,
		arg.Description,
		arg.UserID,
	)
	return err
}

const getStatsForFinalSubEntryBySubmissionID = `-- name: GetStatsForFinalSubEntryBySubmissionID :many
SELECT
    runtime,
    memory,
    status
FROM submission_results
WHERE submission_id = $1
`

type GetStatsForFinalSubEntryBySubmissionIDRow struct {
	Runtime pgtype.Numeric
	Memory  pgtype.Numeric
	Status  string
}

func (q *Queries) GetStatsForFinalSubEntryBySubmissionID(ctx context.Context, submissionID uuid.UUID) ([]GetStatsForFinalSubEntryBySubmissionIDRow, error) {
	rows, err := q.db.Query(ctx, getStatsForFinalSubEntryBySubmissionID, submissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStatsForFinalSubEntryBySubmissionIDRow
	for rows.Next() {
		var i GetStatsForFinalSubEntryBySubmissionIDRow
		if err := rows.Scan(&i.Runtime, &i.Memory, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubmissionByID = `-- name: GetSubmissionByID :one
SELECT
    id,
    question_id,
    language_id,
    source_code,
    testcases_passed,
    testcases_failed,
    runtime,
    memory,
    status,
    submission_time,
    description,
    user_id
FROM submissions
WHERE id = $1
`

type GetSubmissionByIDRow struct {
	ID              uuid.UUID
	QuestionID      uuid.UUID
	LanguageID      int32
	SourceCode      string
	TestcasesPassed pgtype.Int4
	TestcasesFailed pgtype.Int4
	Runtime         pgtype.Numeric
	Memory          pgtype.Numeric
	Status          *string
	SubmissionTime  pgtype.Timestamp
	Description     *string
	UserID          uuid.UUID
}

func (q *Queries) GetSubmissionByID(ctx context.Context, id uuid.UUID) (GetSubmissionByIDRow, error) {
	row := q.db.QueryRow(ctx, getSubmissionByID, id)
	var i GetSubmissionByIDRow
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.LanguageID,
		&i.SourceCode,
		&i.TestcasesPassed,
		&i.TestcasesFailed,
		&i.Runtime,
		&i.Memory,
		&i.Status,
		&i.SubmissionTime,
		&i.Description,
		&i.UserID,
	)
	return i, err
}

const getSubmissionResultsBySubmissionIDQuery = `-- name: GetSubmissionResultsBySubmissionIDQuery :many
SELECT
    id,
    submission_id,
    testcase_id,
    runtime,
    memory,
    status,
    description
FROM submission_results
WHERE submission_id = $1
`

type GetSubmissionResultsBySubmissionIDQueryRow struct {
	ID           uuid.UUID
	SubmissionID uuid.UUID
	TestcaseID   uuid.NullUUID
	Runtime      pgtype.Numeric
	Memory       pgtype.Numeric
	Status       string
	Description  *string
}

func (q *Queries) GetSubmissionResultsBySubmissionIDQuery(ctx context.Context, submissionID uuid.UUID) ([]GetSubmissionResultsBySubmissionIDQueryRow, error) {
	rows, err := q.db.Query(ctx, getSubmissionResultsBySubmissionIDQuery, submissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSubmissionResultsBySubmissionIDQueryRow
	for rows.Next() {
		var i GetSubmissionResultsBySubmissionIDQueryRow
		if err := rows.Scan(
			&i.ID,
			&i.SubmissionID,
			&i.TestcaseID,
			&i.Runtime,
			&i.Memory,
			&i.Status,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubmissionStatusByID = `-- name: GetSubmissionStatusByID :one
SELECT status
FROM submissions
WHERE id = $1
`

func (q *Queries) GetSubmissionStatusByID(ctx context.Context, id uuid.UUID) (*string, error) {
	row := q.db.QueryRow(ctx, getSubmissionStatusByID, id)
	var status *string
	err := row.Scan(&status)
	return status, err
}

const updateScore = `-- name: UpdateScore :exec
WITH best_submissions AS (
    SELECT 
        s.user_id AS user_id,
        s.question_id,
        MAX((s.testcases_passed) * q.points / (s.testcases_passed + s.testcases_failed)::numeric) AS best_score
    FROM submissions s
    INNER JOIN questions q ON s.question_id = q.id
    INNER JOIN users u on s.user_id = u.id 
    WHERE s.user_id = (select user_id from submissions where id = $1) AND q.round = u.round_qualified
    GROUP BY s.user_id, s.question_id
)
UPDATE users
SET score = (
    SELECT SUM(best_score)
    FROM best_submissions
)
WHERE users.id = (select user_id from submissions s where s.id = $1)
`

func (q *Queries) UpdateScore(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateScore, id)
	return err
}

const updateSubmission = `-- name: UpdateSubmission :exec
UPDATE submissions
SET 
    runtime = $1, 
    memory = $2, 
    status = $3,
    testcases_passed = $4,
    testcases_failed = $5
WHERE id = $6
`

type UpdateSubmissionParams struct {
	Runtime         pgtype.Numeric
	Memory          pgtype.Numeric
	Status          *string
	TestcasesPassed pgtype.Int4
	TestcasesFailed pgtype.Int4
	ID              uuid.UUID
}

func (q *Queries) UpdateSubmission(ctx context.Context, arg UpdateSubmissionParams) error {
	_, err := q.db.Exec(ctx, updateSubmission,
		arg.Runtime,
		arg.Memory,
		arg.Status,
		arg.TestcasesPassed,
		arg.TestcasesFailed,
		arg.ID,
	)
	return err
}

const updateSubmissionByID = `-- name: UpdateSubmissionByID :exec
UPDATE submissions
SET 
    runtime = $1, 
    memory = $2, 
    status = $3,
    testcases_passed = $4,
    testcases_failed = $5
WHERE id = $6
`

type UpdateSubmissionByIDParams struct {
	Runtime         pgtype.Numeric
	Memory          pgtype.Numeric
	Status          *string
	TestcasesPassed pgtype.Int4
	TestcasesFailed pgtype.Int4
	ID              uuid.UUID
}

func (q *Queries) UpdateSubmissionByID(ctx context.Context, arg UpdateSubmissionByIDParams) error {
	_, err := q.db.Exec(ctx, updateSubmissionByID,
		arg.Runtime,
		arg.Memory,
		arg.Status,
		arg.TestcasesPassed,
		arg.TestcasesFailed,
		arg.ID,
	)
	return err
}

const updateUserScoreBySubmissionID = `-- name: UpdateUserScoreBySubmissionID :exec
WITH best_submissions AS (
    SELECT 
        s.user_id AS user_id,
        s.question_id,
        MAX((s.testcases_passed) * q.points / (s.testcases_passed + s.testcases_failed)::numeric) AS best_score
    FROM submissions s
    INNER JOIN questions q ON s.question_id = q.id
    INNER JOIN users u on s.user_id = u.id 
    WHERE s.user_id = (select user_id from submissions where id = $1) AND q.round = u.round_qualified
    GROUP BY s.user_id, s.question_id
)
UPDATE users
SET score = (
    SELECT SUM(best_score)
    FROM best_submissions
)
WHERE users.id = (select user_id from submissions s where s.id = $1)
`

func (q *Queries) UpdateUserScoreBySubmissionID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateUserScoreBySubmissionID, id)
	return err
}

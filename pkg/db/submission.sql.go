// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: submission.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSubmission = `-- name: CreateSubmission :exec
INSERT INTO submissions (
    id,
    question_id,
    language_id,
    source_code,
    testcases_passed,
    testcases_failed,
    runtime,
    memory,
    status,
    submission_time,
    description,
    user_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
`

type CreateSubmissionParams struct {
	ID              uuid.UUID
	QuestionID      uuid.UUID
	LanguageID      int32
	SourceCode      string
	TestcasesPassed pgtype.Int4
	TestcasesFailed pgtype.Int4
	Runtime         pgtype.Numeric
	Memory          pgtype.Numeric
	Status          *string
	SubmissionTime  pgtype.Timestamp
	Description     *string
	UserID          uuid.NullUUID
}

func (q *Queries) CreateSubmission(ctx context.Context, arg CreateSubmissionParams) error {
	_, err := q.db.Exec(ctx, createSubmission,
		arg.ID,
		arg.QuestionID,
		arg.LanguageID,
		arg.SourceCode,
		arg.TestcasesPassed,
		arg.TestcasesFailed,
		arg.Runtime,
		arg.Memory,
		arg.Status,
		arg.SubmissionTime,
		arg.Description,
		arg.UserID,
	)
	return err
}

const getSubmissionByID = `-- name: GetSubmissionByID :one
SELECT
    id,
    question_id,
    language_id,
    source_code,
    testcases_passed,
    testcases_failed,
    runtime,
    memory,
    status,
    submission_time,
    description,
    user_id
FROM submissions
WHERE id = $1
`

type GetSubmissionByIDRow struct {
	ID              uuid.UUID
	QuestionID      uuid.UUID
	LanguageID      int32
	SourceCode      string
	TestcasesPassed pgtype.Int4
	TestcasesFailed pgtype.Int4
	Runtime         pgtype.Numeric
	Memory          pgtype.Numeric
	Status          *string
	SubmissionTime  pgtype.Timestamp
	Description     *string
	UserID          uuid.NullUUID
}

func (q *Queries) GetSubmissionByID(ctx context.Context, id uuid.UUID) (GetSubmissionByIDRow, error) {
	row := q.db.QueryRow(ctx, getSubmissionByID, id)
	var i GetSubmissionByIDRow
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.LanguageID,
		&i.SourceCode,
		&i.TestcasesPassed,
		&i.TestcasesFailed,
		&i.Runtime,
		&i.Memory,
		&i.Status,
		&i.SubmissionTime,
		&i.Description,
		&i.UserID,
	)
	return i, err
}

const getTestcases = `-- name: GetTestcases :many
SELECT
    id,
    expected_output,
    memory,
    input,
    hidden,
    runtime,
    question_id
FROM testcases
WHERE question_id = $1
`

func (q *Queries) GetTestcases(ctx context.Context, questionID uuid.UUID) ([]Testcase, error) {
	rows, err := q.db.Query(ctx, getTestcases, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Testcase
	for rows.Next() {
		var i Testcase
		if err := rows.Scan(
			&i.ID,
			&i.ExpectedOutput,
			&i.Memory,
			&i.Input,
			&i.Hidden,
			&i.Runtime,
			&i.QuestionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

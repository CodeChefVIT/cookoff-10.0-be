openapi: 3.0.0
info:
  title: Cookoff Backend API
  description: API Documentation
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local server
paths:
  /signup:
    post:
      summary: User signup
      tags:
        - Auth
      description: Creates a user and sends a generated password through mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        "200":
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignupResponse"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: Validation failed
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"
  
  /login:
    post:
      summary: User login
      tags:
        - Auth
      description: Authenticates a user with email and password, sets cookies for access and refresh tokens, and returns user data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: Validation failed
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Invalid password
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"
  
  /logout:
    post:
      summary: User logout
      tags:
        - Auth
      description: Logs a user out, deletes cookies and removes refresh token from redis.
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponse"
        "400":
          description: Cookie Error
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ErrorResponse"

  /questions:
    post:
      summary: Create a new question
      tags:
        - Questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '201':
          description: Question created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Question'
        '400':
          description: Bad request
        '500':
          description: Internal server error

    get:
      summary: Get all questions
      tags:
        - Questions
      responses:
        '200':
          description: List of all questions
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
        '500':
          description: Internal server error

  /questions/{id}:
    get:
      summary: Get a question by ID
      tags:
        - Questions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Question found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  question:
                    $ref: '#/components/schemas/Question'
        '400':
          description: Invalid UUID
        '404':
          description: Question not found

    put:
      summary: Update a question by ID
      tags:
        - Questions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '200':
          description: Question updated successfully
        '400':
          description: Invalid UUID or bad request
        '500':
          description: Internal server error

    delete:
      summary: Delete a question by ID
      tags:
        - Questions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Question deleted successfully
        '400':
          description: Invalid UUID
        '500':
          description: Internal server error

  /questions/{id}/bounty/activate:
    put:
      summary: Activate bounty for a question
      tags:
        - Questions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Bounty activated successfully
        '400':
          description: Invalid UUID
        '500':
          description: Internal server error

  /questions/{id}/bounty/deactivate:
    put:
      summary: Deactivate bounty for a question
      tags:
        - Questions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Bounty deactivated successfully
        '400':
          description: Invalid UUID
        '500':
          description: Internal server error


components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "failed"
        error:
          type: string
          description: Error Message
    
    SignupRequest:
      type: object
      required:
        - email
        - name
        - reg_no
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        reg_no:
          type: string

    SignupResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: user added
        email:
          type: string
          description: User Email
          example: test@example.com
        password:
          type: string
          description: Generated plain password
          example: test123

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Login successful"
        data:
          type: object
          properties:
            username:
              type: string
              description: User's display name
              example: Chef
            round:
              type: integer
              description: Round qualified (0 or 1)
              example: 1
            score:
              type: string
              description: User score (numeric type from Postgres)
              example: 100
    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        title:
          type: string
        qType:
          type: string
        isBountyActive:
          type: boolean
        inputFormat:
          type: array
          items: { type: string }
        points:
          type: integer
        round:
          type: integer
        constraints:
          type: array
          items: { type: string }
        outputFormat:
          type: array
          items: { type: string }
        sampleTestInput:
          type: array
          items: { type: string }
        sampleTestOutput:
          type: array
          items: { type: string }
        explanation:
          type: array
          items: { type: string }
      required:
        - id
        - description
        - title
        - qType
        - isBountyActive
        - inputFormat
        - points
        - round
        - constraints
        - outputFormat
        - sampleTestInput
        - sampleTestOutput
        - explanation

    CreateQuestionParams:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        title:
          type: string
        qType:
          type: string
        isBountyActive:
          type: boolean
        inputFormat:
          type: array
          items: { type: string }
        points:
          type: integer
        round:
          type: integer
        constraints:
          type: array
          items: { type: string }
        outputFormat:
          type: array
          items: { type: string }
        sampleTestInput:
          type: array
          items: { type: string }
        sampleTestOutput:
          type: array
          items: { type: string }
        explanation:
          type: array
          items: { type: string }
      required:
        - id
        - description
        - title
        - qType
        - isBountyActive
        - inputFormat
        - points
        - round
        - constraints
        - outputFormat
        - sampleTestInput
        - sampleTestOutput
        - explanation

    UpdateQuestionParams:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        title:
          type: string
        qType:
          type: string
        isBountyActive:
          type: boolean
        inputFormat:
          type: array
          items: { type: string }
        points:
          type: integer
        round:
          type: integer
        constraints:
          type: array
          items: { type: string }
        outputFormat:
          type: array
          items: { type: string }
        sampleTestInput:
          type: array
          items: { type: string }
        sampleTestOutput:
          type: array
          items: { type: string }
        explanation:
          type: array
          items: { type: string }
      required:
        - id
        - description
        - title
        - qType
        - isBountyActive
        - inputFormat
        - points
        - round
        - constraints
        - outputFormat
        - sampleTestInput
        - sampleTestOutput
        - explanation

    LogoutResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "logged out successfully"
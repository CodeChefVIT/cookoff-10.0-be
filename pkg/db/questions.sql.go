// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: questions.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createQuestion = `-- name: CreateQuestion :exec
INSERT INTO questions (
    id,
    description, 
    title,
    qType,
    isBountyActive,
    input_format,
    points,
    round,
    constraints,
    output_format,
    sample_test_input,
    sample_test_output,
    explanation
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
)
`

type CreateQuestionParams struct {
	ID               uuid.UUID
	Description      string
	Title            string
	Qtype            string
	Isbountyactive   bool
	InputFormat      []string
	Points           int32
	Round            int32
	Constraints      []string
	OutputFormat     []string
	SampleTestInput  []string
	SampleTestOutput []string
	Explanation      []string
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) error {
	_, err := q.db.Exec(ctx, createQuestion,
		arg.ID,
		arg.Description,
		arg.Title,
		arg.Qtype,
		arg.Isbountyactive,
		arg.InputFormat,
		arg.Points,
		arg.Round,
		arg.Constraints,
		arg.OutputFormat,
		arg.SampleTestInput,
		arg.SampleTestOutput,
		arg.Explanation,
	)
	return err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM questions WHERE id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteQuestion, id)
	return err
}

const getAllQuestions = `-- name: GetAllQuestions :many
SELECT id, description, title, qtype, isbountyactive, input_format, points, round, constraints, output_format, sample_test_input, sample_test_output, explanation FROM questions ORDER BY id
`

func (q *Queries) GetAllQuestions(ctx context.Context) ([]Question, error) {
	rows, err := q.db.Query(ctx, getAllQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Title,
			&i.Qtype,
			&i.Isbountyactive,
			&i.InputFormat,
			&i.Points,
			&i.Round,
			&i.Constraints,
			&i.OutputFormat,
			&i.SampleTestInput,
			&i.SampleTestOutput,
			&i.Explanation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuestion = `-- name: GetQuestion :one
SELECT id, description, title, qtype, isbountyactive, input_format, points, round, constraints, output_format, sample_test_input, sample_test_output, explanation FROM questions
WHERE id = $1
`

func (q *Queries) GetQuestion(ctx context.Context, id uuid.UUID) (Question, error) {
	row := q.db.QueryRow(ctx, getQuestion, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Title,
		&i.Qtype,
		&i.Isbountyactive,
		&i.InputFormat,
		&i.Points,
		&i.Round,
		&i.Constraints,
		&i.OutputFormat,
		&i.SampleTestInput,
		&i.SampleTestOutput,
		&i.Explanation,
	)
	return i, err
}

const updateQuestion = `-- name: UpdateQuestion :exec
UPDATE questions
SET description = $2,
    qType = $3,
    isBountyActive = $4,
    input_format = $5,
    points = $6,
    round = $7,
    constraints = $8,
    output_format = $9,
    sample_test_input = $10,
    sample_test_output = $11,
    explanation = $12
WHERE id = $1
`

type UpdateQuestionParams struct {
	ID               uuid.UUID
	Description      string
	Qtype            string
	Isbountyactive   bool
	InputFormat      []string
	Points           int32
	Round            int32
	Constraints      []string
	OutputFormat     []string
	SampleTestInput  []string
	SampleTestOutput []string
	Explanation      []string
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) error {
	_, err := q.db.Exec(ctx, updateQuestion,
		arg.ID,
		arg.Description,
		arg.Qtype,
		arg.Isbountyactive,
		arg.InputFormat,
		arg.Points,
		arg.Round,
		arg.Constraints,
		arg.OutputFormat,
		arg.SampleTestInput,
		arg.SampleTestOutput,
		arg.Explanation,
	)
	return err
}

const updateQuestionBountyActive = `-- name: UpdateQuestionBountyActive :exec
UPDATE questions
SET isBountyActive = true
WHERE id = $1
`

func (q *Queries) UpdateQuestionBountyActive(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateQuestionBountyActive, id)
	return err
}

const updateQuestionBountyInactive = `-- name: UpdateQuestionBountyInactive :exec
UPDATE questions
SET isBountyActive = false
WHERE id = $1
`

func (q *Queries) UpdateQuestionBountyInactive(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateQuestionBountyInactive, id)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: submission_results.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSubmissionResult = `-- name: CreateSubmissionResult :exec
INSERT INTO submission_results (id, testcase_id, submission_id, runtime, memory, points_awarded, status, description)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateSubmissionResultParams struct {
	ID            uuid.UUID
	TestcaseID    uuid.NullUUID
	SubmissionID  uuid.UUID
	Runtime       pgtype.Numeric
	Memory        pgtype.Numeric
	PointsAwarded int32
	Status        string
	Description   *string
}

func (q *Queries) CreateSubmissionResult(ctx context.Context, arg CreateSubmissionResultParams) error {
	_, err := q.db.Exec(ctx, createSubmissionResult,
		arg.ID,
		arg.TestcaseID,
		arg.SubmissionID,
		arg.Runtime,
		arg.Memory,
		arg.PointsAwarded,
		arg.Status,
		arg.Description,
	)
	return err
}

const getStatsForFinalSubEntry = `-- name: GetStatsForFinalSubEntry :many
SELECT 
    runtime, 
    memory,   
    status
FROM submission_results
WHERE submission_id = $1
`

type GetStatsForFinalSubEntryRow struct {
	Runtime pgtype.Numeric
	Memory  pgtype.Numeric
	Status  string
}

func (q *Queries) GetStatsForFinalSubEntry(ctx context.Context, submissionID uuid.UUID) ([]GetStatsForFinalSubEntryRow, error) {
	rows, err := q.db.Query(ctx, getStatsForFinalSubEntry, submissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStatsForFinalSubEntryRow
	for rows.Next() {
		var i GetStatsForFinalSubEntryRow
		if err := rows.Scan(&i.Runtime, &i.Memory, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubmissionResultsBySubmissionID = `-- name: GetSubmissionResultsBySubmissionID :many
SELECT id,
       testcase_id,
       submission_id,
       runtime,
       memory,
       points_awarded,
       status,
       description
FROM submission_results
WHERE submission_id = $1
`

func (q *Queries) GetSubmissionResultsBySubmissionID(ctx context.Context, submissionID uuid.UUID) ([]SubmissionResult, error) {
	rows, err := q.db.Query(ctx, getSubmissionResultsBySubmissionID, submissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubmissionResult
	for rows.Next() {
		var i SubmissionResult
		if err := rows.Scan(
			&i.ID,
			&i.TestcaseID,
			&i.SubmissionID,
			&i.Runtime,
			&i.Memory,
			&i.PointsAwarded,
			&i.Status,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
